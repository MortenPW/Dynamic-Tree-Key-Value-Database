// Arbeidskrav: Lession 6 - excersise 4
//
// Created by Morten P. Wilsg√•rd
//
// Credits to Hans Aspenberg for ReadFileToBuffer
// Credits to Brad Conte for md5 implementation and such
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define OK         0
#define NOT_GOOD   1
#define EVEN_WORSE 2

#define TRUE 1
#define FALSE !TRUE

void PrintUsage() {
    printf("Usage: "
                   "\n\tmd5 -add <filename>"
                   "\n\tmd5 -test <filename>"
                   "\n\tmd5 -strip <filename>\n");
}

void PrintHash(BYTE *hash) {
    int idx;
    for (idx=0; idx < 16; idx++)
        printf("%X", hash[idx]);
    printf("\n");
}

int StringLength(const BYTE *pointer) {
    int c = 0;

    while( *(pointer + c) != '\0' )
        c++;

    return c;
}

void ReverseString(BYTE *string) {
    int length, c;
    BYTE *begin, *end, temp;

    length = StringLength(string);
    begin  = string;
    end    = string;

    for (c = 0; c < length - 1; c++)
        end++;

    for (c = 0; c < length/2; c++) {
        temp   = *end;
        *end   = *begin;
        *begin = temp;

        begin++;
        end--;
    }
}

void MakeHash(BYTE *buffer, BYTE *hash) {
    MD5_CTX ctx;

    // Generate
    md5_init(&ctx);
    ReverseString(buffer);  // Comply to little endian byte order

    md5_update(&ctx, buffer, strlen((char *) buffer));     // This can be repeated...

    md5_final(&ctx, hash);  // Finalize and get the hash
    ReverseString(buffer);  // Re-reverse buffer
}

int HashToEOF(const char *filename, BYTE *hash) {
    FILE *fp;

    if ((fp = fopen(filename, "awb")) == NULL ){
        printf("Error opening file!\n");
        return -1;
    }

    fwrite(hash, 1, 16, fp);
    fclose(fp);

    return 0;
}

int BufferToFile(const char *filename, BYTE **ppcBuf) {
    FILE *fp;

    if ((fp = fopen(filename, "wb")) == NULL ){
        printf("Error opening file!\n");
        return -1;
    }

    fprintf(fp, "%s", *ppcBuf);
    fclose(fp);

    return 0;
}

int AddHash(const char *filename, BYTE **ppcBuf, BYTE *hash) {
    MakeHash(*ppcBuf, hash);

    if (HashToEOF(filename, hash) != OK)
        return -1;

    printf("Hash generated: ");
    PrintHash(hash);
    printf("Added hash as binary blob to EOF.\n");

    return 0;
}

int CheckHash(const BYTE *hash, const BYTE *hashComp) {
    int idx;
    for (idx = 0; idx < 16; ++idx) {
        if (hash[idx] != hashComp[idx]) {
            printf("Hashes do not match.\n");
            return -1;
        }
    }
    printf("Hashes match!\n");

    return 0;
}

int SplitFileHash(BYTE **ppcBuf, BYTE **ppcBufStripped, BYTE *hashComp, const long *plSize) {
    // Split file from hash
    *ppcBufStripped = (BYTE*) malloc ((size_t) *plSize - 16);
    int i, cnt = 0;
    for (i = 0; i <= *plSize; ++i) {
        if (i >= *plSize-16) hashComp[cnt++] = (*ppcBuf)[i];
        else (*ppcBufStripped)[i] = (*ppcBuf)[i];
    }

    (*ppcBufStripped)[*plSize-16] = 0;
    hashComp[cnt] = 0;

    return 0;
}

// Stolen directly from solutions (superior to my versions)
// Might be slow reading large files into memory
// Added casting to size_t and iRc not good if f == null to avoid segmentation fault
int ReadFileToBuffer (const char *pszFileName, BYTE **ppcBuf, long *plSize) {
    int iRc = OK;
    long lSize, lBytesRead;
    FILE *f;

    f = fopen (pszFileName, "rb");
    if (f != NULL) {
        if (fseek(f, 0, SEEK_END) == 0) {   // Go to end
            lSize = ftell(f);               // Return position (count bytes)
            rewind(f);                      // Go to start
            // We got the size, allocate buffer:
            *ppcBuf = (BYTE *) malloc ((size_t) lSize + 1);
            if (*ppcBuf) {
                // Read the file in one chunk:
                lBytesRead = fread (*ppcBuf, sizeof(char), (size_t) lSize, f);
                if (lBytesRead == lSize) {
                    // We got it all !
                    *plSize = lSize;
                    (*ppcBuf)[lSize] = 0; // Add a terminating '\0'
                }
                else {
                    iRc = NOT_GOOD;
                    free (*ppcBuf);
                    *ppcBuf = NULL;
                }
            }
            else {
                iRc = EVEN_WORSE;
            }
        }
        fclose(f);
    }
    else {
        iRc = NOT_GOOD;
        printf("Error reading file to buffer. Does the file exist?\n");
    }
    return iRc;
}

int main(int argc, char **argv)  {
    if (argc != 3) {
        PrintUsage();
        return 1;
    }

    long    plSize;
    BYTE    hash[16],
            *ppcBuf;

    // Read to buffer
    if (ReadFileToBuffer (argv[2], &ppcBuf, &plSize) != OK)
        return 2;

    // If -add as argument
    if (strcmp (argv[1], "-add") == 0) {
        if (AddHash (argv[2], &ppcBuf, hash) != OK)
            return 3;

        // Free buffer
        free (ppcBuf);
        return 0;
    }

    BYTE    hashComp[16],
            *ppcBufStripped;

    // Split file from hash
    if (SplitFileHash (&ppcBuf, &ppcBufStripped, hashComp, &plSize) != OK)
        return 4;

    // Make hash to check against
    MakeHash (ppcBufStripped, hash);

    // If -test as argument
    if (strcmp (argv[1], "-test") == 0)
        // Check if hashes match
        CheckHash (hash, hashComp);

    // If -strip as argument
    else if (strcmp (argv[1], "-strip") == 0) {
        if (CheckHash (hash, hashComp) == -1) {
            char answer = ' ';
            printf("This action might result in loss of data.\n"
                           "Are you sure you want to strip off 16 bytes of data? y/n\n");

            while (answer != 'y' && answer != 'n') {
                scanf ("%c", &answer);

                if (answer == 'y') {
                    if (BufferToFile (argv[2], &ppcBufStripped) != OK)
                        return 6;

                    printf("16 bytes stripped from file.\n");
                }
                else if (answer == 'n') {
                    printf("\nStripping data aborted.\n");

                    // Free buffers
                    free (ppcBufStripped);
                    free (ppcBuf);
                    return 0;
                }
            }
        }
        else {
            if (BufferToFile (argv[2], &ppcBufStripped) != OK)
                return 7;

            printf("16 bytes stripped from file.\n");
        }
    }

    // If no arguments match
    else PrintUsage();

    // Free buffers
    free (ppcBuf);
    free (ppcBufStripped);

    return 0;
}
